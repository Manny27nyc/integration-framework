{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "externalCondition": {
    "$id": "#/properties/capability/external-condition",
    "title": "External condition",
    "description": "This capability is used to manage external feature workflow conditions",
    "type": "object",
    "propertyNames": {
      "enum": ["creation", "pollingUpdate"]
    },
    "required": ["creation"],
    "properties": {
      "creation": {
        "$id": "#/properties/capability/external-condition/creation",
        "title": "Creation",
        "description": "Properties that describe a request to an integration-controlled API endpoint to establish the external condition",
        "type": "object",
        "propertyNames": {
          "enum": ["endpoint", "template", "parser", "sampleResponse"]
        },
        "required": ["endpoint", "template", "parser"],
        "properties": {
          "endpoint": {
            "$id": "#/properties/capability/external-condition/creation/endpoint",
            "title": "Creation endpoint",
            "description": "Properties that describe the HTTP endpoint LaunchDarkly will use to create an external condition",
            "type": "object",
            "propertyNames": {
              "enum": ["url", "method", "headers"]
            },
            "required": ["url"],
            "properties": {
              "url": {
                "$id": "#/properties/capability/external-condition/creation/endpoint/url",
                "title": "URL",
                "type": "string",
                "description": "URL to send the request to. You can use {{template markup}} to inject a formVariable into the url."
              },
              "method": {
                "$id": "#/properties/capability/external-condition/creation/method",
                "title": "HTTP method",
                "description": "HTTP method to use when LaunchDarkly makes the request to your endpoint",
                "enum": ["POST", "PUT", "PATCH"],
                "default": "POST"
              },
              "headers": {
                "$id": "#/properties/capability/external-condition/creation/headers",
                "title": "HTTP headers",
                "description": "Headers to send with the webhook request",
                "type": "array",
                "items": {
                  "$id": "#/properties/capability/external-condition/creation/endpoint/header/items",
                  "title": "Header items",
                  "description": "A name and value pair to send as headers with the hook request",
                  "type": "object",
                  "propertyNames": {
                    "enum": ["name", "value"]
                  },
                  "properties": {
                    "name": {
                      "$id": "#/properties/capability/external-condition/creation/endpoint/header/items/name",
                      "title": "Name",
                      "type": "string",
                      "description": "Name of the header",
                      "maxLength": 50,
                      "pattern": "^[^\\s]*$"
                    },
                    "value": {
                      "$id": "#/properties/capability/external-condition/creation/endpoint/header/items/value",
                      "title": "Value",
                      "type": "string",
                      "description": "Value of the header. Form variables can be substituted in using {{variableName}}"
                    }
                  },
                  "required": ["name", "value"]
                },
                "default": [
                  {
                    "name": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "examples": [
                  {
                    "name": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "name": "Authorization",
                    "value": "Bearer {{apiToken}}"
                  }
                ],
                "minProperties": 1
              }
            }
          },
          "template": {
            "$id": "#/properties/capability/external-condition/creation/template",
            "title": "Creation template",
            "description": "Relative path to template used to render external condition creation request body",
            "type": "string"
          },
          "parser": {
            "$ref": "parser/parser.json#/parser"
          }
        }
      },
      "pollingUpdate": {
        "$id": "#/properties/capability/external-condition/polling-update",
        "title": "Polling Update",
        "description": "Properties that describe a polling request to get the status of the external condition",
        "type": "object",
        "propertyNames": {
          "enum": ["endpoint", "parser"]
        },
        "required": ["endpoint", "parser"],
        "properties": {
          "endpoint": {
            "$id": "#/properties/capability/external-condition/polling-update/endpoint",
            "title": "Polling update endpoint",
            "description": "Properties that describe the HTTP endpoint LaunchDarkly will use to get the status of an external condition via polling",
            "type": "object",
            "propertyNames": {
              "enum": ["url", "method", "headers"]
            },
            "required": ["url"],
            "properties": {
              "url": {
                "$id": "#/properties/capability/external-condition/polling-update/endpoint/url",
                "title": "URL",
                "type": "string",
                "description": "URL to send the request to. You can use {{template markup}} to inject a formVariable into the url."
              },
              "method": {
                "$id": "#/properties/capability/external-condition/polling-update/method",
                "title": "HTTP method",
                "description": "HTTP method to use when LaunchDarkly makes the request to your endpoint",
                "enum": ["GET", "POST", "PUT", "PATCH"],
                "default": "GET"
              },
              "headers": {
                "$id": "#/properties/capability/external-condition/polling-update/headers",
                "title": "HTTP headers",
                "description": "Headers to send with the webhook request",
                "type": "array",
                "items": {
                  "$id": "#/properties/capability/external-condition/polling-update/endpoint/header/items",
                  "title": "Header items",
                  "description": "A name and value pair to send as headers with the hook request",
                  "type": "object",
                  "propertyNames": {
                    "enum": ["name", "value"]
                  },
                  "properties": {
                    "name": {
                      "$id": "#/properties/capability/external-condition/polling-update/endpoint/header/items/name",
                      "title": "Name",
                      "type": "string",
                      "description": "Name of the header",
                      "maxLength": 50,
                      "pattern": "^[^\\s]*$"
                    },
                    "value": {
                      "$id": "#/properties/capability/external-condition/polling-update/endpoint/header/items/value",
                      "title": "Value",
                      "type": "string",
                      "description": "Value of the header. Form variables can be substituted in using {{variableName}}"
                    }
                  },
                  "required": ["name", "value"]
                },
                "default": [
                  {
                    "name": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "examples": [
                  {
                    "name": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "name": "Authorization",
                    "value": "Bearer {{apiToken}}"
                  }
                ],
                "minProperties": 1
              }
            }
          },
          "parser": {
            "$ref": "parser/parser.json#/parser"
          }
        }
      }
    }
  }
}
